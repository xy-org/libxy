cimport unistd.h, errno.h in c

;; Struct representing a file handle.
struct~[copy=False] File {
    fd: int = -1;
}

struct~[flags=True] OpenFlags {
    append : int = c.O_APPEND;
    create := c.O_CREAT;
    directory := c.O_DIRECTORY;
    read := c.O_READ;
    write := c.O_WRITE;
}

;; Tag file which are externally managed and should not be closed.
struct NoClose {};

;; Opens a file
def *open(name: String, flags: OpenFlags) -> File || ErrnoError {
    fd : int = c.open(name, flags);
    if (fd < 0) {
        error ErrnoError{c.errno};
    }
    return File{fd};
}

;; Writes `msg` to `f`
def *write(f: File, msg: String) -> void || ErrnoError {
    totalWritten : var Size = 0;
    while (totalWritten < msg.buf.len) {
        bytesWritten : c.ssize_t = c.write(
            f.fd, msg.buf.addr + totalWritten, msg.buf.len - totalWritten
        );
        if (bytesWritten < 0) {
            error ErrnoError{c.errno};
        }
        totalWritten += bytesWritten;
    }
}

;; Prints `msg` to standards output
def *print(msg: String) -> void {
    stdout := File~[delete=NoClose]{0};
    stdout'write(f"{msg}\n");
}

def *del(f: File) -> void {
    if (f.fd >= 0) {
        c.close(f.fd);
    }
}

def *del(f: File~[delete=NoClose]) -> void {
}