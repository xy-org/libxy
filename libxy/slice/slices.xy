;; Hail the AllSlice
*struct AllSlice {
}

*def slice() = AllSlice{};

;; A simplified interval with start and end of ints
*struct IntInterval {
    start: Int;
    end: Int;
}

;; A full slice of ints
*struct IntSlice {
    start: Int;
    end: Int;
    step: Int;
}

*def slice(start: Int) = IntInterval{start, Int'max};
*def slice(end: Int, start := 0) = IntInterval{start, end};
*def slice(step: Int, end := Int'max, start := 0) = IntSlice{start, end, step};

*def len(interval: IntInterval) = interval.end - interval.start;

;; A simplified interval with start and end of sizes
*struct SizeInterval {
    start: Size;
    end: Size;
}

;; A full slice of ints
*struct SizeSlice {
    start: Size;
    end: Size;
    step: Size;
}

*def slice(start : Size) = SizeInterval{start, Size'max};
*def slice(end : Size, start: Size = 0) = SizeInterval{start, end};
*def slice(step : Size, end := Size'max, start := 0) = SizeSlice{start, end, step};

*def len(interval: SizeInterval) = interval.end - interval.start;

;; A range [{start}, {end})
*struct FloatRange {
    start: Float;
    end: Float;
}

*def slice(start: Float) = FloatRange{start, Float'inf};
*def slice(end: Float, start := 0.0) = FloatRange{start, end};

;; A range [{start}, {end})
*struct DoubleRange {
    start: Double;
    end: Double;
}

*def slice(start: Double) = DoubleRange{start, Double'inf};
*def slice(end: Double, start := 0.0d) = DoubleRange{start, end};

*def len(range: (FloatRange, DoubleRange)) = range.end - range.start;
