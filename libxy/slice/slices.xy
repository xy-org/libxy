;; Represent a kind of interval spaning from -inf to +inf
*struct AllSlice {
}

*def slice() = AllSlice{};

;; Range is an half-open interval [start, end}
*struct RangeInt {
    start: Int;
    end: Int;
}

;; ...
*struct RangeSize {
    start: Size;
    end: Size;
}

;; ...
*struct RangeFloat {
    start: Float;
    end: Float;
}

;; ...
*struct RangeDouble {
    start: Double;
    end: Double;
}

;; A slice represent the list of values in [{start}, {end}) separated by {step}
*struct SliceInt {
    start: Int;
    end: Int;
    step: Int;
}

;; ...
*struct SliceSize {
    start: Size;
    end: Size;
    step: Size;
}

# I don't see the point of floating-point slices

;; Construct a slice
*def slice(start: Int) = RangeInt{start, Int'max};
*def slice(end: Int, start := 0) = RangeInt{start, end};
*def slice(step: Int, end := Int'max, start := 0) = SliceInt{start, end, step};

*def slice(start : Size) = RangeSize{start, Size'max};
*def slice(end : Size, start: Size = 0) = RangeSize{start, end};
*def slice(step : Size, end := Size'max, start := 0) = RangeSize{start, end, step};

*def slice(start : Long) = RangeLong{start, Long'max};
*def slice(end : Long, start: Long = 0) = RangeLong{start, end};
*def slice(step : Long, end := Long'max, start := 0) = RangeLong{start, end, step};

*def slice(start: Float) = RangeFloat{start, Float'inf};
*def slice(end: Float, start := 0.0) = RangeFloat{start, end};

*def slice(start: Double) = RangeDouble{start, Double'inf};
*def slice(end: Double, start := 0.0d) = RangeDouble{start, end};

*def len(range: RangeInt) =
    if (range.end > range.start) range.end'to(Uint) - range.start'to(Uint) - 1
    else 0u;

*def len(interval: RangeSize) = interval.end - interval.start;

*def len(range: (RangeFloat, RangeDouble)) = range.end - range.start;
