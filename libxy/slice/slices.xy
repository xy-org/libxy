;; Represent a kind of interval spaning from -inf to +inf
*struct AllSlice {
}

*def slice() = AllSlice{};

;; Range is an half-open interval [start, end}. A step of 1 is implied
*struct RangeByte {
    start: Byte;
    end: Byte;
}

;; ...
*struct RangeUbyte {
    start: Ubyte;
    end: Ubyte;
}

;; ...
*struct RangeShort {
    start: Short;
    end: Short;
}

;; ...
*struct RangeUshort {
    start: Ushort;
    end: Ushort;
}

;; ...
*struct RangeInt {
    start: Int;
    end: Int;
}

;; ...
*struct RangeUint {
    start: Uint;
    end: Uint;
}

;; ...
*struct RangeLong {
    start: Long;
    end: Long;
}

;; ...
*struct RangeUlong {
    start: Ulong;
    end: Ulong;
}

*RangeSize := RangeUlong;

;; Range is an half-open interval [start, end}.
*struct RangeFloat {
    start: Float;
    end: Float;
}

;; ...
*struct RangeDouble {
    start: Double;
    end: Double;
}

;; A slice represent the list of values in [{start}, {end}) separated by {step}
*struct SliceInt {
    start: Int;
    end: Int;
    step: Int;
}

# I don't see the point of floating-point slices

;; Construct a slice
*def slice(
    start: (Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong)
) = rangeType(start){start, (%start)'max};

*def slice(
    end: (Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong),
    start := 0'to(%end)
) = rangeType(start){start, end};

*def slice(
    step: (Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong),
    end := (%step)'max, start := 0'to(%end)
) = sliceType(start){start, end, step};

-def rangeType(:Byte)   = RangeByte;
-def rangeType(:Ubyte)  = RangeUbyte;
-def rangeType(:Short)  = RangeShort;
-def rangeType(:Ushort) = RangeUshort;
-def rangeType(:Int)    = RangeInt;
-def rangeType(:Uint)   = RangeUint;
-def rangeType(:Long)   = RangeLong;
-def rangeType(:Ulong)  = RangeUlong;

-def sliceType(:Byte)   = SliceByte;
-def sliceType(:Ubyte)  = SliceUbyte;
-def sliceType(:Short)  = SliceShort;
-def sliceType(:Ushort) = SliceUshort;
-def sliceType(:Int)    = SliceInt;
-def sliceType(:Uint)   = SliceUint;
-def sliceType(:Long)   = SliceLong;
-def sliceType(:Ulong)  = SliceUlong;

*def len(
    range: (RangeUbyte, RangeUshort, RangeUint, RangeUlong)
) =
    if (range.end > range.start) range.end - range.start
    else 0'to(%range.end);

*def len(
    range: (RangeByte, RangeShort, RangeInt, RangeLong)
) =
    if (range.end > range.start) range.end'unsign - range.start'unsign
    else 0'to(%range.end'unsign);

-def unsign(a: Byte) a'to(Ubyte);
-def unsign(a: Short) a'to(Ushort);
-def unsign(a: Int) a'to(Uint);
-def unsign(a: Long) a'to(Ulong);

;; Construct a slice
*def slice(start: Float) = RangeFloat{start, Float'inf};
*def slice(end: Float, start := 0.0) = RangeFloat{start, end};

*def slice(start: Double) = RangeDouble{start, Double'inf};
*def slice(end: Double, start := 0.0d) = RangeDouble{start, end};

*def len(range: (RangeFloat, RangeDouble)) = range.end - range.start;
