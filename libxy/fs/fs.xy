;; FileSystem and Blocking File IO functionality

import posix~[CLib{headers=@{"unistd.h", "fcntl.h"}}] in c;
import libxy.string;
import libxy.flag;
import libxy.error;

;; Flags governing how a file is to be opened
*struct OpenFlags {
    value: Int;

    append : pseudo = Flag{c.O_APPEND};

    create : pseudo = Flag{c.O_CREAT};

    directory : pseudo = Flag{c.O_DIRECTORY};

    readOnly : pseudo = Flag{c.O_RDONLY};
    #r : pseudo = readOnly;

    writeOnly : pseudo = Flag{c.O_WRONLY};
    #w : pseudo = writeOnly;

    readWrite : pseudo = Flag{c.O_RDWR};
    #rw : pseudo = readWrite;

    truncate : pseudo = Flag{c.O_TRUNC};
    #trunc : pseudo = truncate;; Shorthand for truncate

    exclusive : pseudo = Flag{c.O_EXCL};
    #excl : pseudo = exclusive;; Shorthand for exclusive
}

*def get(oflags: OpenFlags, flag: Flag) = oflags.value[flag];

*def set(oflags: mut OpenFlags, flag: Flag, on: Bool) oflags.value[flag] = on;

;; Struct representing a file handle.
*struct File {
    fd: Int = -1;
}

;; Open a file
;; See {OpenFlags} for explanation of what all the toggles mean
* def open(
    path: Str,
    append := false, create := false, directory := false, readOnly := false,
    writeOnly := false, readWrite := false, truncate := false,
    exclusive := false,
    mode := 0644
) = open(path, OpenFlags{
        =append, =create, =directory, =readOnly, =writeOnly, =readWrite,
        =truncate, =exclusive
    }, mode);

;; Open a file
*def open(
    path: Str, flags: OpenFlags, mode := 0644
) -> File || SystemError
>> nullTerminated(path)
{
    fd : Int = c.open(path.addr~[c.char], flags.value, mode);
    if (fd < 0) {
        error SystemError{c.errno};
    }
    return File{fd};
}

*def write(file: File, str: Str) -> void || SystemError {
    total : mut Size;
    do {
        # TODO use c.ssize_t
        written : Size = c.write(
            file.fd, str.addr + total, str.len - total
        );
        if (written < 0) {
            error SystemError{c.errno};
        }
        total += written;
    } while (total < str.len);
}

*def close(file: File) -> void || SystemError {
    if (file.fd >= 0) {
        res: Int = c.close(file.fd);
        if (res != 0) {
            error SystemError{c.errno};
        }
    }
}

*def dtor(f: File) {
    f'close;
}