import xytest;
import libxy.array;
import libxy.cli;
import libxy.string;
import xy.sys;

;; == Application specific data == ;;

;; Concatenate and print files
struct CatArgs {
    ;; path to files
    files : Array~Str;

    ;; Display line count
    lineCount: Bool;
}

*def helpMsgManual~Test() {
    schema : mut = CliSchema{
    };
    schema'prog(
        "ProgramName",
        desc="What the program does",
        epilog="Text at the bottom of help"
    );
    schema'param("filename", .positional);
    schema'param("count", short=`c`, type="num");
    schema'param("verbose", short=`v`, type="");

    (equal) f"{schema}", """
    Usage: ProgramName [-h] [-c <num>] [-v] <filename>

    What the program does

    Options:
      -h, --help
      -c, --count <num>
      -v, --verbose

    Text at the bottom of help
    ";
}

*def parsingOnePosArg~Test() {
    schema : mut = CliSchema{
    };
    schema'prog("ProgramName");
    schema'param("filename", .positional);

    cliArgs := @{c"./a.out", c"myfile.txt"};
    parsed := schema'prs(rawArgs=CmdArgs{cliArgs'len'to(Int), cliArgs'addrof});

    (equal) parsed'len, 1;
    (equal) parsed[0].name, "filename";
    (equal) parsed[0].value, "myfile.txt";
}

*def parsingOnePosArgErr~Test() {
    schema : mut = CliSchema{
    };
    schema'prog("ProgramName");
    schema'param("filename", .positional);

    cliArgs := @{c"./a.out"};

    err := | schema'prs(CmdArgs{cliArgs'len'to(Int), cliArgs'addrof}) |;
    (assert) err'to(Bool), "Parsing didn't fail despite missing pos arg";

    (equal) err.msg, "Missing positional parameter 'filename'";
}

#*def parsing~Test() {
#    schema := CliSchema'fromType(CatArgs);
#    args := parseCli(schema, res);; # what about remaining arguments
#}