import libxy.(array, string);
import xytest;


*def normalUsage~Test() {
    arr: Array~Int;

    for (i in :100) {
        arr'append(i);
    }
    (equal) arr'len, 100;

    for (i in :100) {
        (equal) arr[i], i;
    }
    (equal) arr'len, 100;

    arr'clear;
    (equal) arr'len, 0;

    for (i in :200) {
        val := i * 2;
        arr'append(val);
        (equal) arr[i], i * 2;
    }
    (equal) arr'len, 200;
}

struct WithDtor {
    ptr: Ptr;
}

struct DtorCounter {
    count: Uint;
}

def dtor(s: WithDtor) {
    [Global~DtorCounter].count++;
}

*def dtorsAreCalled~Test() {
    arr: Array~WithDtor;
    for (i in :10) {
        arr @= WithDtor{Ptr{}};
    }
    arr'clear();
    (equal) [Global~DtorCounter].count, 10;
}

*def insertingItems~Test() {
    arr : Array~Int;
    for (i in :10) {
        arr'insert(0'to(Size), i);
    }
    for (i in :10) {
        (equal) arr[i], 10 - i - 1;
    }
}

*def sortingEasy~Test() {
    n := 10;
    arr : Array~Int;
    for (i in :n) {
        arr @= n - i - 1;
    }

    arr'sort;
    for (i in :n) {
        (equal) arr[i], i;
    }

    arr'sort(.decreasing);
    for (i in :n) {
        (equal) arr[i], n - i - 1;
    }
}

struct Pair {
    key: Int;
    value: Int;
}

def cmp(p1: Pair, p2: Pair) = cmp(p1.key, p2.key);

*def stability~Test() {
    n := 1_000;
    max := 10;
    arr: Array~Pair;
    for (i in :n) {
        arr @= Pair{key=i \mod max, value=i};
    }

    arr'sort;

    for (i in 1z:arr'len) {
        (assert) arr[i-1].key <= arr[i].key;
        if (arr[i-1].key == arr[i].key) {
            (assert) arr[i-1].value < arr[i].value;
        }
    }
}
