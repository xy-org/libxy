;; Functionality related to terminals or tty
;; Mostly basic stuff. You can do pretty colors and query a tty about common
;; properties.

;; Helpful resources:
;;   * https://gist.github.com/ConnerWill/d4b6c776b509add763e17f9f113fd25b
;;   * https://invisible-island.net/xterm/ctlseqs/ctlseqs.html
;;   * https://en.wikipedia.org/wiki/ANSI_escape_code

import libxy.string;
import libxy.flag;

;; Data required to generate escape codes
*struct Esc {
    ;; Control Sequence Introducer section

    cursor: CursorControl;
    clear: ClearMode;
    erase: EraseMode;
    screenBuffer: ScreenBufferControl;

    bracketedPasteEnum : Byte;; > 0 for turn on; < 0 for turn off;
    bracketedpaste : pseudo = BracketedPaste{};

    ;; Select Graphic Rendition section

    sgrFlags: Uint;

    bold: pseudo          = Flag{1};
    faint: pseudo         = Flag{2};
    italic: pseudo        = Flag{4};
    underline: pseudo     = Flag{8};
    blinking: pseudo      = Flag{16};
    inverse: pseudo       = Flag{32};
    hidden: pseudo        = Flag{64};
    strikethrough: pseudo = Flag{128};
    reset: pseudo         = Flag{256};; Reset any previous color/graphics modes

    bg: Color;
    fg: Color;
}

*def get(esc: Esc, flag: Flag) esc.sgrFlags[flag];

*def set(esc: mut Esc, flag: Flag, on: Bool) esc.sgrFlags[flag] = on;

struct CursorControl {
    up := 0;; move cursor up or down {up} lines
    left := 0;; move cursor left or right {left} columns

    x := 0;; set cursor position to {x} column (1-based)
    y := 0;; set cursor position to {y} line (1-based)

    save := false;; save current cursor position
    restore := false;; restore last saved cursor position
}

struct ScreenBufferControl {
    alternate := false;; enable alternate screen buffer
    normal := false;; restore normal screen buffer
}

struct ClearMode {
    toEndOfScreen := false;
    toBeginningOfScreen := false;
    screen := false;
    screenAndScrollback := false;
}

struct EraseMode {
    toEndOfLine := false;
    toBeginningOfLine := false;
    line := false;
}

struct BracketedPaste {}

;; Info about a color on the terminals
*struct Color {
    r: Ubyte;
    g: Ubyte;
    b: Ubyte;

    mode : ColorMode;

    black:    pseudo = Enum{30};
    red:      pseudo = Enum{31};
    green:    pseudo = Enum{32};
    yellow:   pseudo = Enum{33};
    blue:     pseudo = Enum{34};
    magenta:  pseudo = Enum{35};
    cyan:     pseudo = Enum{36};
    white:    pseudo = Enum{37};
    default:  pseudo = Enum{39};

    gray:          pseudo = Enum{90};
    brightBlack:   pseudo = Enum{90};; Synonym for gray
    brigthRed:     pseudo = Enum{91};
    brigthGreen:   pseudo = Enum{92};
    brigthYellow:  pseudo = Enum{93};
    brigthBlue:    pseudo = Enum{94};
    brigthMagenta: pseudo = Enum{95};
    brigthCyan:    pseudo = Enum{96};
    brigthWhite:   pseudo = Enum{97};

    index: pseudo = IndexColor8Bit{};
}

;; Used just for a nice syntax around Color.index
struct IndexColor8Bit {}

*def get(esc: Color, enum: Enum) =
    esc.mode.depth4 && esc.r == enum.value'to(%esc.r);

*def get(esc: Color, :IndexColor8Bit) esc.r;

*def set(esc: mut Color, enum: Enum, on: Bool) {
    if (on) {
        esc.mode.depth4 = true;
        esc.r = enum.value'to(%esc.r);
    }
}

*def set(esc: mut Color, :IndexColor8Bit, index: Ubyte) {
    esc.mode.depth8 = true;
    esc.r = index;
}

*struct ColorMode {
    value: Ubyte;

    none: pseudo = Enum{0};
    depth4: pseudo = Enum{1};
    depth8: pseudo = Enum{2};
    depth24: pseudo = Enum{3};
}

*def get(cm: ColorMode, enum: Enum) cm.value[enum];
*def set(cm: mut ColorMode, enum: Enum, on: Bool) cm.value[enum] = on;

*def append(fstr: mut Fstr, esc: Esc, enabled: Bool = true) {
    if (!enabled) return;
    if (esc.sgrFlags == 0 && esc.bg.mode.none && esc.fg.mode.none) return;

    fstr'append("\033[");

    if (esc.reset) fstr'append("0;");
    if (esc.bold) fstr'append("1;");
    if (esc.faint) fstr'append("2;");
    if (esc.italic) fstr'append("3;");
    if (esc.underline) fstr'append("4;");
    if (esc.blinking) fstr'append("5;");
    if (esc.inverse) fstr'append("7;");
    if (esc.hidden) fstr'append("8;");
    if (esc.strikethrough) fstr'append("9;");

    if (esc.fg.mode.depth4) {
        fstr'append(esc.fg.r);
        fstr'append(";");
    } elif (esc.fg.mode.depth8) {
        fstr'append("38;5;");
        fstr'append(esc.fg.index);
        fstr'append(";");
    } elif (esc.fg.mode.depth24) {
        fstr'append("38;2;");
        fstr'append(esc.fg.r);
        fstr'append(";");
        fstr'append(esc.fg.g);
        fstr'append(";");
        fstr'append(esc.fg.b);
        fstr'append(";");
    }

    if (esc.bg.mode.depth4) {
        fstr'append(esc.bg.r + 10);
        fstr'append(";");
    } elif (esc.bg.mode.depth8) {
        fstr'append("48;5;");
        fstr'append(esc.bg.index);
        fstr'append(";");
    } elif (esc.bg.mode.depth24) {
        fstr'append("48;2;");
        fstr'append(esc.bg.r);
        fstr'append(";");
        fstr'append(esc.bg.g);
        fstr'append(";");
        fstr'append(esc.bg.b);
        fstr'append(";");
    }


    fstr'backtrack(1u);; the trailing ';'
    fstr'append("m");
}
