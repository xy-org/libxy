;; Attributes

import posix~[Clib{headers=@{"unistd.h", "termios.h", "sys/ioctl.h"}}] in c;
import libxy.(fs, error);

*struct TtyAttrs {
    native: c."struct termios";

    ;; Trun off canonical input, echo. Make characters available immediately.
    ;; Special characters still deliver signals.
    raw: pseudo = RawAttr{};
}

*def ttyAttrs(f: File) -> TtyAttrs | SystemError {
    attrs: TtyAttrs;
    res: Int = c.tcgetattr(f.fd, attrs.native'addrof);
    if (res < 0) {
        error SystemError{c.errno};
    }
    return attrs;
}

*def setTtyAttrs(f: File, attrs: TtyAttrs) -> void | SystemError {
    res: Int = c.tcsetattr(f.fd, c.TCSAFLUSH, attrs.native'addrof);
    if (res < 0) {
        error SystemError{c.errno};
    }
}

*struct TtySize {
    width: Uint;
    height: Uint;
}

*def ttySize(f: File) -> TtySize | SystemError {
    winsize: c."struct winsize";
    err: Int = c.ioctl(f.fd, c.TIOCGWINSZ, winsize'addrof);
    if (err < 0) {
        error SystemError{c.errno};
    }
    return TtySize{ inlinec"{winsize}.ws_col", inlinec"{winsize}.ws_row" };
}

-struct RawAttr {}
*def get(attrs: TtyAttrs, :RawAttr) = break """
    Raw is a pseudo property that turns on/off a few other properties.
    It cannot be read. Only set.
";

*def set(attrs: mut TtyAttrs, :RawAttr, on: Bool)
>> on
{
    ;; Refer to Advanced UNIX Programming 4.5.10 and tcgetattr(3) for more info

    ;; OPOST - output processing
    ;; ICANON - cannonical input i.e. don't wait for a whole line
    ;; ECHO(NL) - echo each character. ECHONL is an extra flag for \n
    ;; IXON - flow control
    ;; INLCR | ICRNL | INPCK - weird \n mappings
    ;; ISTRIP - strip 8-th bit of input. Why does this even exist!

    tbuf := attrs.native'addrof;
    inlinec"""
        {tbuf}->c_iflag &= ~(INLCR | ICRNL | INPCK | ISTRIP | IXON);
        {tbuf}->c_oflag &= ~OPOST;
        {tbuf}->c_lflag &= ~(ECHO | ECHONL | ICANON);
        {tbuf}->c_cflag &= ~(CSIZE | PARENB);
        {tbuf}->c_cflag |= CS8;
        {tbuf}->c_cc[VMIN] = 0;
        {tbuf}->c_cc[VTIME] = 0;
    ";
}

