import libc~[CLib{headers=["string.h", "stdio.h"]}] in c
import libxy.memory

def cstr~[StrCtor{prefix="c", interpolation=false}] (
    addr: Ptr, size: Size
) -> Ptr {
    return addr;
}

struct Str~[memory :struct = MemManaged, xy_dtor=true] {
    addr: Ptr;
    len: Size;
}

def dtor(str: Str, _ : pseudo void = dtor(str, str..memory)) {}

def dtor(str: Str, :MemManaged) {
    c.free(str.addr);
}

def dtor(str: Str, :MemExt) {}

def dtor(str: Str, :MemStatic) {}


def str~[StrCtor{prefix="", interpolation=false}] (
    addr: Ptr, size: Size
) -> Str~MemStatic {
    return Str{addr, size};
}

def cmp(str1: Str, str2: Str) -> Size {
    if (str1.len != str2.len) {
        return str1.len - str2.len;
    }
    return c.strncmp(str1.addr, str2.addr, str1.len);
}

def startswith(str: Str, prefix: Str) -> bool {
    if (prefix.len > str.len) {
        return false;
    }
    strncmpRes: int = c.strncmp(str.addr, prefix.addr, prefix.len);
    return strncmpRes == 0;
}

def endswith(str: Str, suffix: Str) -> bool {
    if (suffix.len > str.len) {
        return false;
    }
    strncmpRes: int = c.strncmp(str.addr + (str.len - suffix.len), suffix.addr, suffix.len);
    return strncmpRes == 0;
}

# XXX I really dislike that function
def toCStr(str: Str) -> Ptr {
    if (str.len <= 0) {
        return Ptr{};
    }
    mem: Memory;
    mem'realloc(str.len+1);
    c.memset(mem.addr, 0, mem.size);
    c.strncpy(mem.addr, str.addr, str.len);
    return mem.addr;
}

struct StrBuilder~[xy_dtor=true] {
    mem: Memory;
    len: Size;
}

def dtor(builder: inout StrBuilder) {
    builder.mem'free();
}

def strBuilder~[StrCtor{prefix="f", interpolation=true, to=Str}] (
    addr: pseudo Ptr, size: Size
) -> StrBuilder {
    return StrBuilder{};
}

def ensureCap(builder: inout StrBuilder, requiredCap: Size) {
    minSize := builder.len + requiredCap;
    if (builder.mem.size < minSize) {
        newSize : var = 2 * builder.mem.size;
        if (newSize < minSize) {
            newSize = minSize;
        }
        builder.mem'realloc(newSize);
    }
}

def append(builder: inout StrBuilder, addr: Ptr, size: Size) {
    builder'ensureCap(size);
    c.memcpy(builder.mem.addr + builder.len, addr, size); 
    builder.len += size;
}

def append(builder: inout StrBuilder, str: Str) {
    builder'append(str.addr, str.len);
}

def append(builder: inout StrBuilder, num: int) {
    builder'ensureCap(Size{10});
    added : int = c.sprintf(builder.mem.addr + builder.len, c"%d", num);
    builder.len += added;
}

def append(builder: inout StrBuilder, num: Size) {
    builder'ensureCap(Size{10});
    added : int = c.sprintf(builder.mem.addr + builder.len, c"%ld", num);
    builder.len += added;
}

def append(builder: inout StrBuilder, num: float, precision:=6) {
    builder'ensureCap(Size{20});
    added : int = c.sprintf(builder.mem.addr + builder.len, c"%.*f", precision, num);
    builder.len += added;
}

def append(builder: inout StrBuilder, num: double, precision:=6) {
    builder'ensureCap(Size{20});
    added : int = c.sprintf(builder.mem.addr + builder.len, c"%.*f", precision, num);
    builder.len += added;
}

def to(builder: inout StrBuilder, :Str) -> Str {
    res := Str{builder.mem.addr, builder.len};
    builder.mem.addr = Ptr{};
    builder.mem.size = 0;
    return res;
}
