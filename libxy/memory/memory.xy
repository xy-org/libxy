import libc~[CLib{headers=@["stdlib.h", "string.h"]}] in c;
import libxy.slices;

;; Tag for memory that is managed by a struct and should be deallocated
struct MemManaged {}

;; Tag for memory that is externally manged and shouldn't be deallocated
struct MemExt {}

;; Tag for memory that is static and doesn't need any deallocation
struct MemStatic {}

struct Memory {
    addr: Ptr;
    size: Size;
}

def *realloc(mem: mut Memory, size: Size) {
    # TODO check output
    mem.addr = c.realloc(mem.addr, size);
    mem.size = size;
}

def *free(mem: mut Memory) {
    c.free(mem.addr);
    mem.addr = 0;
    mem.size = 0;
}

def *at(mem: Memory, idx: Size) -> Ptr
>> idx < mem.size
{
    return mem.addr + idx;
}

def *set(mem: Memory, interval: SizeInterval, ptr: Ptr)
# >> (
#     (ptr + interval'len) <= (mem + interval.start) |
#     (mem + interval.end) <= ptr
# ) ;; assume no overlap
{
    c.memcpy(mem.addr + interval.start, ptr, interval'len);
}