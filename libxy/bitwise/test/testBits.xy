import xytest;
import libxy.bitwise;

*def get~Test() {
    num := 011001010100101(2);
    (assert)  num'bits[0];
    (assert) !num'bits[1];
    (assert)  num'bits[2];
    (assert)  num'bits[5];
    (assert)  num'bits[13];
}

*def getBitOfBits~Test() {
    bits := 011001010100101(2)'bits;
    (assert)  bits[0];
    (assert) !bits[1];
    (assert)  bits[2];
    (assert)  bits[5];
    (assert)  bits[13];
}

*def flip~Test() {
    num : mut = 011001010100101(2);
    num'bits = !num'bits;
    (assert) !num'bits[0];
    (assert)  num'bits[1];
    (assert) !num'bits[2];
    (assert) !num'bits[5];
    (assert) !num'bits[13];
}

*def set~Test() {
    num : Int;
    num'bits[10] = true;
    num'bits[20] = true;
    (assert) num == 0x100400;
}

*def copy~Test() {
    # probably the most inefficient way to copy a number
    num := 0random(36);

    (assert) copyBits(num) == num;
    (assert) copyBits(num'to(Byte)) == num'to(Byte);
    #(assert) copyBits(num'to(Ubyte)) == num'to(Ubyte);
    (assert) copyBits(num'to(Ushort)) == num'to(Ushort);
    #(assert) copyBits(num'to(Short)) == num'to(Short);
    #(assert) copyBits(num'to(Uint)) == num'to(Uint);
    #(assert) copyBits(num'to(Long)) == num'to(Long);
    #(assert) copyBits(num'to(Ulong)) == num'to(Ulong);
}

-def copyBits(num: (Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong)) -> %num {
    # probably the most inefficient way to copy a number
    copy: %num;
    for (i in :num'bits'len) {
        copy'bits[i] = num'bits[i];
    }
    return copy;
}

*def xor~Test() {
    n1 := 0x1fub;
    n2 := 0x22ub;
    xor := n1'bits - n2'bits;
    (assert) xor'to(Ubyte) == 0x3dub;
}
