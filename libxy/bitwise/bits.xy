def any(b: Bits8)  b'to(Ubyte) != 0;
def any(b: Bits16) b'to(Ushort) != 0;
def any(b: Bits32) b'to(Uint) != 0;
def any(b: Bits64) b'to(Ulong) != 0;

def len(b: Bits8) 8;
def len(b: Bits16) 16;
def len(b: Bits32) 32;
def len(b: Bits64) 64;

def get(b: Bits8, i: (Byte, Ubyte, Short, Ushort, Int, Uint)) -> Bool {
    return (b & (1ub'to(%b) \shiftl i))'any;
}

def get(b: Bits16, i: (Byte, Ubyte, Short, Ushort, Int, Uint)) -> Bool {
    return (b & (1us'to(%b) \shiftl i))'any;
}

def get(b: Bits32, i: (Byte, Ubyte, Short, Ushort, Int, Uint)) -> Bool {
    return (b & (1u'to(%b) \shiftl i))'any;
}

def get(b: Bits64, i: (Byte, Ubyte, Short, Ushort, Int, Uint)) -> Bool {
    return (b & (1ul'to(%b) \shiftl i))'any;
}

def set(b: mut Bits64, i: Int, val: Bool) -> b[ Int ] {
    b = b | (val'to(Ulong)'to(Bits64) \shiftl i);
    return i;
}

def set(b: mut Bits32, i: Int, val: Bool) -> b[ Int ] {
    b = b | (val'to(Uint)'to(Bits32) \shiftl i);
    return i;
}

struct Bits {}

def bits(a: (Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong)) -> a[ Bits ] {
    return Bits{};
}

def get(a: (Byte, Ubyte), b: pseudo Bits) -> Bits8 {
    return a'to(Bits8);
}

def get(a: (Short, Ushort), b: pseudo Bits) -> Bits16 {
    return a'to(Bits16);
}

def get(a: (Int, Uint), b: pseudo Bits) -> Bits32 {
    return a'to(Bits32);
}

def get(a: (Long, Ulong), b: pseudo Bits) -> Bits64 {
    return a'to(Bits64);
}

def set(num: mut Long, :Bits, i: Int, val: Bool) {
    bits : mut = num'bits;
    bits[i] = val;
    num = bits'to(Long);
}

def set(num: mut Int, :Bits, i: Int, val: Bool) {
    bits : mut = num'bits;
    bits[i] = val;
    num = bits'to(Int);
}

def set(num: mut Uint, :Bits, i: Int, val: Bool) {
    bits : mut = num'bits;
    bits[i] = val;
    num = bits'to(Uint);
}

def set(num: mut Long, :Bits, bits: Bits64) num = bits'to(Long);

def set(num: mut Int, :Bits, bits: Bits32) num = bits'to(Int);

def set(num: mut Uint, :Bits, bits: Bits32) num = bits'to(Uint);