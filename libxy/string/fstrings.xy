import xy.ctti;

*struct Fstr~[xy_dtor=true] {
    mem: Memory;
    len: Size;
}

*def dtor(builder: mut Fstr) {
    builder.mem'free();
}

*def fstr~[StrCtor{prefix="f", interpolation=true, to=Str}] (
    addr: pseudo Ptr, size: Size
) -> Fstr {
    return Fstr{};
}

def ensureCap(builder: mut Fstr, requiredCap: Size) {
    minSize := builder.len + requiredCap;
    if (builder.mem.size < minSize) {
        newSize : mut = 2 * builder.mem.size;
        if (newSize < minSize) {
            newSize = minSize;
        }
        builder.mem'realloc(newSize + 1);
    }
}

*def append(builder: mut Fstr, addr: Ptr, size: Size) {
    builder'ensureCap(size);
    c.memcpy(builder.mem.addr + builder.len, addr, size);
    builder.len += size;
}

*def append(builder: mut Fstr, str: Str) {
    builder'append(str.addr, str.len);
}

;; Number of available bytes in builder
def capacity(fstr: Fstr) fstr.mem.size - fstr.len;

def printfFmt(:Byte) inlinec"\"%\"PRId8";
def printfFmt(:Ubyte) inlinec"\"%\"PRIu8";
def printfFmt(:Short) inlinec"\"%\"PRId16";
def printfFmt(:Ushort) inlinec"\"%\"PRIu16";
def printfFmt(:Int) inlinec"\"%\"PRId32";
def printfFmt(:Uint) inlinec"\"%\"PRIu32";
def printfFmt(:Long) inlinec"\"%\"PRId64";
def printfFmt(:Ulong) inlinec"\"%\"PRIu64";
def printfFmt(:Size) inlinec"\"%zu\"";

;; Stringify and append {num}
*def append(
    builder: mut Fstr,
    num: (Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong, Size),
    base := 10
)
>> base >= 2 & base <= 36
{
    #if (num < 0) {
    #    builder'append(`-`);
    #    builder'appendUnsigned((-num)'unsigned, base=base'to(Ubyte), ...);
    #} else {
    #    builder'appendUnsigned(num'unsigned, base=base'to(Ubyte), ...);
    #}

    do {
        capacity := builder'capacity();
        added : Int = c.snprintf(builder.mem.addr~[c.char] + builder.len, capacity, num'printfFmt, num);
        if (added >= 0) {
            if (added'to(Size) >= capacity) {
                builder'ensureCap(added'to(Size) + 1);
            } else {
                builder.len += added'to(Size);
                break;
            }
        } else {
            break;  # I think it is safe to ignore this kind of error
        }
    } while(true);
}

def unsigned(a: Byte) a'to(Ubyte);
def unsigned(a: Short) a'to(Ushort);
def unsigned(a: Int) a'to(Uint);
def unsigned(a: Long) a'to(Ulong);
def unsigned(a: Ubyte) a;
def unsigned(a: Ushort) a;
def unsigned(a: Uint) a;
def unsigned(a: Ulong) a;
def unsigned(a: Size) a;

#def appendUnsigned(
#    fstr: mut Fstr,
#    num: (Ubyte, Ushort, Uint, Ulong, Size),
#    base : Ubyte
#) {
#    fstr'ensureCap(num'sizeof * 8);; Worst-case number of symbols
#    rem : mut = num;
#    do {
#        digit := rem \mod base;
#        rem = rem / base;
#
#        #if (digit <= 9) {
#        #    [builder.mem.addr + builder.len] = (`0` + digit)'to(Byte);
#        #} else {
#        #    [builder.mem.addr + builder.len] = (`A` + digit)'to(Byte);
#        #}
#        #builder.len++;
#    } while (rem != 0);
#}

;; ...
*def append(builder: mut Fstr, num: Float, precision:=6) {
    builder'ensureCap(20z);
    added : Int = c.sprintf(builder.mem.addr~[c.char] + builder.len, c"%.*f", precision, num);
    builder.len += added'to(Size);
}

;; ...
*def append(builder: mut Fstr, num: Double, precision:=6) {
    builder'ensureCap(20z);
    added : Int = c.sprintf(builder.mem.addr~[c.char] + builder.len, c"%.*f", precision, num);
    builder.len += added'to(Size);
}

*def backtrack(builder: mut Fstr, num: Uint) {
    builder.len -= num;
}

;; Encode {char} to utf-8 and append to str. Invalid chars are ignored.
*def append(builder: mut Fstr, char: Char) {
    builder'ensureCap(4z);
    nchar := char'to(Uint);
    if (nchar <= 0x7F) {
        [builder.mem.addr+builder.len] = nchar'to(Byte);
        builder.len += 1;
    } elif (nchar <= 0x07FF) {
        [builder.mem.addr+builder.len+0] = (0xC0'bits | nchar'bits'shiftr(6))'to(Bits8)'to(Byte);
        [builder.mem.addr+builder.len+1] = (0x80'bits | (0x3F'bits & nchar'bits))'to(Bits8)'to(Byte);
        builder.len += 2;
    } elif (nchar <= 0xFFFF) {
        [builder.mem.addr+builder.len+0] = (0xE0'bits | nchar'bits'shiftr(12))'to(Bits8)'to(Byte);
        [builder.mem.addr+builder.len+1] = (0x80'bits | (0x3F'bits & nchar'bits'shiftr(6)))'to(Bits8)'to(Byte);
        [builder.mem.addr+builder.len+2] = (0x80'bits | (0x3F'bits & nchar'bits))'to(Bits8)'to(Byte);
        builder.len += 3;
    } elif (nchar <= 0x10FFFF) {
        [builder.mem.addr+builder.len+0] = (0xF0'bits | nchar'bits'shiftr(18))'to(Bits8)'to(Byte);
        [builder.mem.addr+builder.len+1] = (0x80'bits | (0x3F'bits & nchar'bits'shiftr(12)))'to(Bits8)'to(Byte);
        [builder.mem.addr+builder.len+2] = (0x80'bits | (0x3F'bits & nchar'bits'shiftr(6)))'to(Bits8)'to(Byte);
        [builder.mem.addr+builder.len+3] = (0x80'bits | (0x3F'bits & nchar'bits))'to(Bits8)'to(Byte);
        builder.len += 4;
    }
    ;; Else invalid char. Just ignore.
}

*def to(builder: mut Fstr, :Str) -> Str {
    builder'ensureCap(1z);
    ;; not really needed but better safe than sorry
    [builder.mem.addr~[c.char] + builder.len] = 0;
    res := Str{builder.mem.addr, builder.len};
    builder.mem =< Memory{};
    return res;
}
