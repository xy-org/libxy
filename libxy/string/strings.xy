import libc~[Clib{headers=@{"string.h", "stdio.h", "inttypes.h"}}] in c;
import libxy.(memory, error, slice, bitwise);

def cstr~[StrCtor{prefix="c", interpolation=false}] (
    addr: Ptr, size: Usize
)
    addr~[c.char];

;; A UTF-8 encoded string
*struct Str~[
    ;; Strings tagged with {MemManaged} have memory managed by {Str} itself
    ;; and have a trailing zero byte.
    ;;
    ;; Strings tagged with {MemExt} have memory not managed by {Str}
    ;; and no assumptions about the existence of a trailing zero byte.
    ;;
    ;; Strings tagged with {MemStatic} are allocated in static memory,
    ;; and have a trailing zero byte.
    memory : Any = void
] {
    addr: Ptr~Byte;
    size: Usize;; The byte-length of the string as encoding in UTF-8
}

*def dtor(str: Str) dtor(str, str..memory);

def dtor(str: Str, :MemManaged) {
    c.free(str.addr);
}

def dtor(str: Str, :MemExt) {}

def dtor(str: Str, :MemStatic) {}


def str~[StrCtor{prefix="", interpolation=false}] (
    addr: Ptr, size: Usize
) Str~MemStatic{addr, size};

*def get(s: Str, i: Usize) -> Byte
>> i < s.size
{
    return [(s.addr)~[to=Byte] + i];
}

;; Count the number of unicode code points (chars) in the string
;; Illegal byte sequences are counted as 1 code point
*def count(s: Str) -> Usize {
    res : Usize;
    i : Usize;
    while (i < s.size) {
        leadingOnes := s[i]'bits'countLeadingOnes;
        res++;
        i++;
        if (leadingOnes >= 2 && leadingOnes <= 4) {
            contBytes := min((leadingOnes - 1)'to(Usize), s.size - i);
            for (_ in 0:contBytes) {
                contOnes := s[i]'bits'countLeadingOnes;
                if (contOnes != 1 && contOnes <= 4) {
                    # premature end of current sequence. Break b/c
                    # a new sequence is following
                    break;
                }
                # else if {contOnes} == 1 then we have a valid seq
                # if {contOnes} is > 4 then we have a broken byte and we want
                # to skip it
                i++;
            }
        }
        ;; if {leadingOnes == 0} then ascii otherwise broken byte
    }
    return res;
}

*def get(s: Str, int: (RangeInt, RangeUint, RangeUlong)) -> Str~MemExt
>> int.start >= 0 && int.start <= int.end
{
    start := min(int.start'to(Usize), s.size);
    end := min(int.end'to(Usize), s.size);
    return Str~MemExt{s.addr + start, end - start};
}

;; Return true if string is empty
*def empty(s: Str) s.size == 0;

;; Retrun true if string is not empty
*def any(s: Str) s.size != 0;

*def cmp(str1: Str, str2: Str) -> Int {
    if (str1.size > str2.size) {
        return 1;
    } elif (str1.size < str2.size) {
        return -1;
    }
    return c.strncmp(str1.addr~[c.char], str2.addr~[c.char], str1.size);
}

*def startswith(str: Str, prefix: Str) -> Bool {
    if (prefix.size > str.size) {
        return false;
    }
    strncmpRes: Int = c.strncmp(str.addr~[c.char], prefix.addr~[c.char], prefix.size);
    return strncmpRes == 0;
}

*def endswith(str: Str, suffix: Str) -> Bool {
    if (suffix.size > str.size) {
        return false;
    }
    strncmpRes: Int = c.strncmp(str.addr~[c.char] + (str.size - suffix.size), suffix.addr~[c.char], suffix.size);
    return strncmpRes == 0;
}

*def ensureNullTerminated(str: Str) ensureNullTerminated(str, str..memory);
def ensureNullTerminated(str: Str, :MemManaged) str;
def ensureNullTerminated(str: Str, :MemStatic) str;
def ensureNullTerminated(str: Str, :MemExt) str'copy();

*def nullTerminated(str: Str) nullTerminated(str, str..(memory, MemExt));
def nullTerminated(str: Str, :MemManaged) true;
def nullTerminated(str: Str, :MemStatic) true;
def nullTerminated(str: Str, :MemExt) false;

*def copy(str: Str) -> Str~MemManaged {
    newmem : Memory;
    newmem'realloc(str.size + 1);
    c.memcpy(newmem.addr, str.addr, str.size);
    [newmem.addr + str.size] = 0;; add terminating \0
    return Str{addr=newmem.addr, size=str.size};
}

struct CharIter {
    i: Usize;; byte-offset of the code point after {char} in string
    char: Char;; character at that offset
}

*def get(str: Str, charIter: CharIter) = charIter.char;

;; Iterate of the unicode characters (code points) in {str}
;; Illegal byte sequences are replaced by U+FFFD
*def chars~IterCtor(str: Str) -> str[ CharIter ] {
    iter : CharIter;
    next(str, iter);
    return iter;
}

*def valid(str: Str, iter: CharIter) iter.char'to(Int) >= 0;

*def next(str: Str, iter: mut CharIter) {
    cp := decode(str, iter.i);
    iter.char = cp;
}

def decode(s: Str, i: mut Usize) -> Char {
    if (i >= s.size) {
        return (-1)'to(Char);
    }

    cp : Int;
    leadingByte := s[i];
    leadingOnes := leadingByte'bits'countLeadingOnes;
    i++;

    if (leadingOnes >= 2 && leadingOnes <= 4) {
        cp'bits = 0xFF'bits'shiftr(leadingOnes+1) && leadingByte'bits'to(Bits32);
        contBytes := min((leadingOnes - 1)'to(Usize), s.size - i);
        for (_ in 0:contBytes) {
            contOnes := s[i]'bits'countLeadingOnes;
            if (contOnes == 1) {
                cp'bits = cp'bits'shiftl(6) || (0x3Fub'bits && s[i]'bits)'to(Bits32);
            } elif (contOnes != 1 && contOnes <= 4) {
                # premature end of current sequence. Break b/c
                # a new sequence is following
                cp = -1;
                break;
            } else {
                # broken byte.
                cp = -1;
            }
            i++;
        }
    } elif (leadingOnes == 0) {
        ;; Ascii symbol
        cp = leadingByte'to(Int);
    } else {
        ;; Broken byte
        cp = -1;
    }

    if (cp < 0) {
        cp = 0xFFFD;; Replace invalid bytes by replacement char
    }

    return cp'to(Char);
}


;; Split by (white)space characters
*def split~IterCtor(str: Str) -> str[ SplitIter ] {
    si: mut = SplitIter{.valid};
    next(str, si);
    return si;
}

*def valid(str: Str, iter: SplitIter) = iter.valid;

*def get(str: Str, iter: SplitIter) = iter.word;

*def next(str: Str, iter: mut SplitIter) {
    istart := do -> (istart: Usize) {
        istart = iter.ichar.i;
        next(str, iter.ichar);
        if (!valid(str, iter.ichar)) {
            !.iter.valid;
            return;
        }
    } while (str[iter.ichar]'space);

    iend := do -> (iend: Usize) {
        iend = iter.ichar.i;
        next(str, iter.ichar);
        if (!valid(str, iter.ichar)) {
            break;
        }
    } while (!str[iter.ichar]'space);

    iter.word = Str~MemExt{str.addr + istart, iend - istart};
}

struct SplitIter {
    ichar: CharIter;
    word: Str~MemExt;
    valid: Bool;
}

*def space(ch: Char) -> Bool {
    return ch == `\n` || ch == ` `;
}
