import libc~[CLib{headers=@{"string.h", "stdio.h", "inttypes.h"}}] in c;
import libxy.memory;
import libxy.error;
import libxy.slice;

def cstr~[StrCtor{prefix="c", interpolation=false}] (
    addr: Ptr, size: Size
)
    addr~[c.char];

;; Tag for strings that are managed by the Str struct itself.
;; Have trailing zero byte.
struct MemManaged {}

;; Tag for strings that are not managed by the Str struct itself.
;; No assumptions about the existence of a trailing zero byte.
struct MemExt {}

;; Tag for strings that are are allocated in static memory and need no free.
;; Have trailing zero byte.
struct MemStatic {}


;; A UTF-8 encoded string
*struct Str~[memory :struct = MemManaged] {
    addr: Ptr~Byte;
    len: Size;
}

*def dtor(str: Str) dtor(str, str..memory);

def dtor(str: Str, :MemManaged) {
    c.free(str.addr);
}

def dtor(str: Str, :MemExt) {}

def dtor(str: Str, :MemStatic) {}


def str~[StrCtor{prefix="", interpolation=false}] (
    addr: Ptr, size: Size
) Str~MemStatic{addr, size};

;; The byte-length of the string as encoding in UTF-8
*def len(s: Str) s.len;

*def get(s: Str, i: Size) -> Byte
>> i < s'len
{
    return [(s.addr)~[to=Byte] + i];
}

*def get(s: Str, int: SizeInterval) -> Str~MemExt
>> int.start <= s.len
>> (int.end - int.start) <= s.len
{
    return Str{s.addr + int.start, int.end - int.start};
}

*def cmp(str1: Str, str2: Str) -> Int {
    if (str1.len > str2.len) {
        return 1;
    } elif (str1.len < str2.len) {
        return -1;
    }
    return c.strncmp(str1.addr~[c.char], str2.addr~[c.char], str1.len);
}

*def cmpEq(str1: Str, str2: Str) cmp(str1, str2) == 0;
*def cmpNe(str1: Str, str2: Str) cmp(str1, str2) != 0;
*def cmpGt(str1: Str, str2: Str) cmp(str1, str2) > 0;
*def cmpGe(str1: Str, str2: Str) cmp(str1, str2) >= 0;
*def cmpLt(str1: Str, str2: Str) cmp(str1, str2) < 0;
*def cmpLe(str1: Str, str2: Str) cmp(str1, str2) <= 0;

*def startswith(str: Str, prefix: Str) -> Bool {
    if (prefix.len > str.len) {
        return false;
    }
    strncmpRes: Int = c.strncmp(str.addr~[c.char], prefix.addr~[c.char], prefix.len);
    return strncmpRes == 0;
}

*def endswith(str: Str, suffix: Str) -> Bool {
    if (suffix.len > str.len) {
        return false;
    }
    strncmpRes: Int = c.strncmp(str.addr~[c.char] + (str.len - suffix.len), suffix.addr~[c.char], suffix.len);
    return strncmpRes == 0;
}

*def ensureNullTerminated(str: Str) ensureNullTerminated(str, str..memory);
def ensureNullTerminated(str: Str, :MemManaged) str;
def ensureNullTerminated(str: Str, :MemStatic) str;
def ensureNullTerminated(str: Str, :MemExt) str'copy();

*def nullTerminated(str: Str) nullTerminated(str, str..memory);
def nullTerminated(str: Str, :MemManaged) true;
def nullTerminated(str: Str, :MemStatic) true;
def nullTerminated(str: Str, :MemExt) false;

*def copy(str: Str) -> Str {
    newmem : Memory;
    newmem'realloc(str.len + 1);
    c.memcpy(newmem.addr, str.addr, str.len);
    return Str{addr=newmem.addr, len=str.len};
}

*struct StrBuilder~[xy_dtor=true] {
    mem: Memory;
    len: Size;
}

*def dtor(builder: mut StrBuilder) {
    builder.mem'free();
}

*def strBuilder~[StrCtor{prefix="f", interpolation=true, to=Str}] (
    addr: pseudo Ptr, size: Size
) -> StrBuilder {
    return StrBuilder{};
}

*def ensureCap(builder: mut StrBuilder, requiredCap: Size) {
    minSize := builder.len + requiredCap;
    if (builder.mem.size < minSize) {
        newSize : mut = 2 * builder.mem.size;
        if (newSize < minSize) {
            newSize = minSize;
        }
        builder.mem'realloc(newSize + 1);
    }
}

*def append(builder: mut StrBuilder, addr: Ptr, size: Size) {
    builder'ensureCap(size);
    c.memcpy(builder.mem.addr + builder.len, addr, size); 
    builder.len += size;
}

*def append(builder: mut StrBuilder, str: Str) {
    builder'append(str.addr, str.len);
}

*def append(builder: mut StrBuilder, num: Int) {
    builder'ensureCap(10z);
    added : Int = c.sprintf(builder.mem.addr~[c.char] + builder.len, inlinec"\"%\"PRId32", num);
    builder.len += added'to(Size);
}

*def append(builder: mut StrBuilder, num: Uint) {
    builder'ensureCap(10z);
    added : Int = c.sprintf(builder.mem.addr~[c.char] + builder.len, inlinec"\"%\"PRIu32", num);
    builder.len += added'to(Size);
}

*def append(builder: mut StrBuilder, num: Long) {
    builder'ensureCap(20z);
    added : Int = c.sprintf(builder.mem.addr~[c.char] + builder.len, inlinec"\"%\"PRId64", num);
    builder.len += added'to(Size);
}

*def append(builder: mut StrBuilder, num: Size) {
    builder'ensureCap(10z);
    added : Int = c.sprintf(builder.mem.addr~[c.char] + builder.len, c"%zu", num);
    builder.len += added'to(Size);
}

*def append(builder: mut StrBuilder, num: Float, precision:=6) {
    builder'ensureCap(20z);
    added : Int = c.sprintf(builder.mem.addr~[c.char] + builder.len, c"%.*f", precision, num);
    builder.len += added'to(Size);
}

*def append(builder: mut StrBuilder, num: Double, precision:=6) {
    builder'ensureCap(20z);
    added : Int = c.sprintf(builder.mem.addr~[c.char] + builder.len, c"%.*f", precision, num);
    builder.len += added'to(Size);
}

*def backtrack(builder: mut StrBuilder, num: Uint) {
    builder.len -= num;
}

*def to(builder: mut StrBuilder, :Str) -> Str {
    res := Str{builder.mem.addr, builder.len};
    builder.mem.addr = Ptr{};
    builder.mem.size = 0;
    return res;
}
