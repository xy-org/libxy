import xytest;

*def charLen~Test() {
    (assert) "".len == 0;
    (assert) ""'count == 0;
    (assert) "\x00".len == 1;
    (assert) "\x00"'count == 1;
    (assert) "a".len == 1;
    (assert) "a"'count == 1;
    (assert) "abc".len == 3;
    (assert) "abc"'count == 3;
    (assert) "абв".len == 6;
    (assert) "абв"'count == 3;
    ;; https://unicode-explorer.com/emoji/military-medal
    (assert) "\U+1F396\U+FE0F".len == 7;
    (assert) "\U+1F396\U+FE0F"'count == 2;
}

*def charLenInvalidInput~Test() {
    ;; A truncated 3-byte code followed by a space.
    ;; Count the truncated code as 1 invalid symbol and the space as other.
    (assert) "\xE1\xA0\x20"'count == 2;

    ;; Truncated 3-byte codes
    (assert) "\xE1\xA0"'count == 1;
    (assert) "\xE1"'count == 1;

    ;; Truncated 3-byte codes multiple types
    (assert) "\xE1\xA0\xE1"'count == 2;

    ;; Invalid continuation byte
    (assert) "\xA0"'count == 1;
    (assert) "\xA0\x20"'count == 2;
}

*def iteratingChars~Test() {
    ;; U+0041 U+0411 U+304F U+0394
    str := "AБくΔ";
    expr := @{`A`, `Б`, `く`, `Δ`};
    i : Int;
    for (c in str'chars) {
        (assert) expr[i] == c;
        i++;
    }
    charLen := i;
    (assert) charLen == 4;
}
